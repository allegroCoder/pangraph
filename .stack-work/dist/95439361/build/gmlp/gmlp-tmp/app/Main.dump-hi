
==================== FINAL INTERFACE ====================
2016-08-25 09:39:24.2571424 UTC

interface main@main:Main 7103
  interface hash: 896e8f64cc32110b01f33d88c06894f4
  ABI hash: 5e47b5e12e86fc2b217b3b322c8556da
  export-list hash: d8668876cfb3eec2e73ef2b4805ebd81
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6218278d55ec1a9116c08c5242e47e50
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      gmlp-0.1.0.0@gmlp_3M29I1e6N7FDSykZk1FK9j integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
import  -/  base-4.8.2.0:GHC.Base ab3ff5d7de26c5c2e08d2bb04c08d54e
import  -/  base-4.8.2.0:GHC.Show 81f797f6fb519cae2341362c0c4308de
import  -/  base-4.8.2.0:Prelude 0f9dd1bcfa413fa55bb6dca444292bf6
import  -/  base-4.8.2.0:System.IO 1df80b4c86d7c7612f2b342f2d372da9
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  gmlp-0.1.0.0@gmlp_3M29I1e6N7FDSykZk1FK9j:Gmlp ab604c59c117bf6bb28155b408401d8f
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.Parsec c05736a9c25b1f808889c3a01d7fc294
import  -/  parsec-3.1.11@parse_AtBt9uDOS2NCyWnucTHV3y:Text.Parsec.Prim 4bc58e8a0bba7974fb38c611cbfa08d5
693ef9ed9f7dea8f7cb481a4baf9937d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
d92579242271776a87d4cbd71264b25f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   path :: [GHC.Types.Char]
                   = GHC.Base.++ @ GHC.Types.Char ipv3 Main.main3
                 } in
                 case GHC.IO.Handle.FD.openFile1
                        path
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (case (Text.Parsec.Prim.runPT
                                 @ GHC.Base.String
                                 @ ()
                                 @ Data.Functor.Identity.Identity
                                 @ Gmlp.File
                                 @ GHC.Types.Char
                                 (Gmlp.$s$fStream[]mtok @ GHC.Types.Char)
                                 Gmlp.parseFile1
                                   `cast`
                                 (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                           <[GHC.Types.Char]>_R
                                           <()>_R
                                           <Data.Functor.Identity.Identity>_R
                                           <Gmlp.File>_R))
                                 GHC.Tuple.()
                                 path
                                 ipv7)
                                `cast`
                              (Data.Functor.Identity.NTCo:Identity[0]
                                   <Data.Either.Either
                                      Text.Parsec.Error.ParseError Gmlp.File>_R) of wild {
                           Data.Either.Left b1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                Data.Either.$fShowEither3
                                (case b1 of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                                 case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                                 Text.Parsec.Error.$w$cshow ww4 ww5 ww6 ww2 } })
                           Data.Either.Right b1
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                Data.Either.$fShowEither2
                                (case b1 of ww2 { Gmlp.File ww3 ww4 ww5 ->
                                 Gmlp.$w$cshowsPrec1
                                   11
                                   ww3
                                   ww4
                                   ww5
                                   (GHC.Types.[] @ GHC.Types.Char) }) })
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv8 } } } } }) -}
5ee5321e25be274d674284fa424d1df8
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "complete"#) -}
fd72e6b4e0c3123fd40bf4d96aa52f69
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ".graphml"#) -}
4d9c6009c363f131e32086af11eb2256
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "File name:"#) -}
7998e609231ac6cad4cb3522d9fd15d5
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

